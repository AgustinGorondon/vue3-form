import { Ref } from 'vue';
import { Form, FormField, FormFieldNormalized, FormInputValue, FormProperties, FormPropertyKey, Rule, RuleName, ServerErrors, ValidationCallback } from './types';
export { Form, FormField, FormFieldNormalized, FormInputValue, FormProperties, FormPropertyKey, Rule, RuleName, ServerErrors, ValidationCallback, };
export declare const ruleHub: Record<string, Rule>;
export declare const getFields: (form: Ref<Form>) => FormFieldNormalized[];
export declare const getFormData: (form: Ref<Form>) => FormData;
export declare const getRawFormData: (form: Ref<Form>) => Record<string, unknown>;
export declare const updateForm: (form: Ref<Form>, properties: FormProperties) => void;
export declare const setFormErrors: (form: Ref<Form>, serverErrors: ServerErrors) => void;
export declare const getFieldError: (field: FormFieldNormalized, ruleName?: RuleName) => string | string[] | undefined;
export declare const validateField: (field: FormFieldNormalized, form: Ref<Form>) => boolean;
export declare const validateForm: (form: Ref<Form>, callback?: ValidationCallback) => boolean;
export declare const resetForm: (form: Ref<Form>) => void;
export declare const useForm: (fields: Record<string, FormField>, extra?: Record<string, unknown>) => Ref<Form>;
